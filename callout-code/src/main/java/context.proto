/*
 * Copyright 2020 Google LLC
 *
 * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * <p>https://www.apache.org/licenses/LICENSE-2.0
 *
 * <p>Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package apigee;

option java_package = "com.google.apigee";

/* CalloutContext holds both the MessageContext and ExecutionContext objects
 * for a java callout. */
message CalloutContext {
  MessageContext messageContext = 1;
  ExecutionContext executionContext = 2;
}

/* MessageContext holds the request, response and error Messages along with a
 * variable map and a mapping of identifier strings to FlowInfo objects. */
message MessageContext {
  Message request_message = 1;
  Message response_message = 2;
  Message error_message = 3;
  map<string, string> variables = 5;
  map<string, FlowInfo> flow_info_map = 6;

  /* A representation of a Message containing headers, query parameters,
   * content and a TransportMessage object. */
  message Message {
    map<string, string> header_map = 1;
    repeated string headers = 2;
    string content = 3;
    repeated string query_param_names = 4;
    map<string, string> query_param_map = 5;
    repeated string query_params = 6;
    TransportMessage transport_message = 7;

    /* TransportMessage containing headers, properties, message content
     * and the contentType. */
    message TransportMessage {
      string transport_id = 1;
      map<string, string> property = 2;
      repeated string header_names = 3;
      map<string, string> header_map = 4;
      repeated string headers = 5;
      string content = 6;
      MediaType contentType = 7;

      /* An object representing an abstraction for a media type.
      * Has the type, subtype and a parameter map. */
      message MediaType {
        string type = 1;
        string subtype = 2;
        map<string, string> parameters = 3;
      }
    }
  }

  /* Represents any object associated with a flow. */
  message FlowInfo {
    string identifier = 1;
    map<string, string> map = 2;
  }
}

/* Object allowing access to proxy execution context. */
message ExecutionContext {
  bool is_request_flow = 1;
  bool is_error_flow = 2;
  repeated Fault faults = 3;
  Fault fault = 4;

  /* Describes an exception occuring within the flow. */
  message Fault {
    Category category = 1;
    string sub_category = 2;
    string name = 3;
    string reason = 4;
    Throwable exception = 5;
    map<string, string> attributes = 6;

    /* Enumerator for category of the Fault. */
    enum Category {
      Messaging = 0;
      Step = 1;
      Transport = 2;
      System = 3;
    }

    /* Represents errors and exceptions in Java. */
    message Throwable {
      string message = 1;
      Throwable cause = 2;
      repeated StackTraceElement stack_trace = 3;

      /* Represents a single stack frame. */
      message StackTraceElement {
        string class_loader_name = 1;
        string module_name = 2;
        string module_version = 3;
        string declaring_class = 4;
        string method_name = 5;
        string file_name = 6;
        int32 line_number = 7;
      }
    }
  }
}